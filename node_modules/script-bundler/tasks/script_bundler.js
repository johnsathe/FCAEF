/*
 * script-bundler
 * http://github.com/petervyvey/script-bundler
 *
 * Copyright (c) 2014 Peter Vyvey
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function (grunt) {

    var uglify = require('./lib/script_bundler_core').init(grunt);
    var glob = require('glob');

    grunt.registerMultiTask('script_bundler', 'Some obscure script bundling grunt plugin.', function () {
        var self = this;

        var options = this.options({
            isDeployBuild: false,
            banner: '',
            footer: '',
            compress: {
                warnings: false
            },
            mangle: {},
            beautify: false,
            report: 'min',
            expression: false
        });

        // Iterate over all specified file groups.
        this.files.forEach(function(file) {
            var bundlesConfig = file.src.filter(function(filepath) {
                // Warn on and remove invalid source files (if nonull was set).
                if (!grunt.file.exists(filepath)) {
                    grunt.log.warn('Source file "' + filepath + '" not found.');
                    return false;
                } else {
                    return true;
                }
            }).map(function(filepath) {
                // Read file source.
                return grunt.file.read(filepath);
            });

            var instance = JSON.parse(bundlesConfig);
            instance.bundles.forEach(function(bundle) {
                var sourceFiles = [];
                if (bundle.build && bundle.build.targets.length > 0) {
                    if (bundle.build.targets.indexOf('release') > -1) {
                        if (bundle.scripts) {
                            bundle.scripts.forEach(function (script) {
                                script.source = script.source.replace('~/', '../../');

                                if (options.isDeployBuild) {
                                    script.source = script.source.replace('.ts', '.js');
                                }

                                new glob.Glob(script.source, { mark: true, sync: true }, function (er, matches) {
                                    matches.forEach(function(match) {
                                        sourceFiles.push(match.replace('.ts', '.js'));
                                    })
                                });
                            });
                        }
                    }
                }

                if (sourceFiles.length > 0) {
                    console.log('Bundle', file.dest + '/' + bundle.name + '.min.js');
                    console.log('Files', sourceFiles);
                    var output = uglify.minify(sourceFiles, file.dest, options);
                    grunt.file.write(file.dest + '/' + bundle.name + '.min.js', output.min);
                    console.log('');
                }
            });
        });
    });

};
